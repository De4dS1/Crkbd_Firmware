// Rotation config
oled_rotation_t oled_init_user(oled_rotation_t rotation){
     if (is_keyboard_master()) return OLED_ROTATION_270;
     else return OLED_ROTATION_180;

     return rotation;
}

// Logo printing funcitions
static void render_logo(void) {
    static const char PROGMEM logo0[] = {
        0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F, 0x90, 0x91, 0x92, 0x00
    };

    static const char PROGMEM logo1[] = {
        0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF, 0xB0, 0xB1, 0xB2, 0x00
    };
    static const char PROGMEM logo2[] = {
        0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0x00
    };

    oled_set_cursor(0,0);
    oled_write_P(logo0, false);
    oled_set_cursor(0,1);
    oled_write_P(logo1, false);
    oled_set_cursor(0,2);
    oled_write_P(logo2, false);
}


static void Arch(void){
     static const char PROGMEM arch0[] = {
	0x01, 0x02, 0x03, 0x04, 0x04,
	0x21, 0x22, 0x23, 0x24, 0x25,
	0x41, 0x42, 0x43, 0x44, 0x45,
	0x61, 0x62, 0x63, 0x64, 0x65, 0x00
     };
     oled_write_P(arch0, false);
}

static void Caps(void){
     static const char PROGMEM caps0[] = {
	0x05, 0x06, 0x07, 0x08, 0x09,
	0x26, 0x27, 0x28, 0x29, 0x2A,
	0x46, 0x47, 0x48, 0x49, 0x4A,
	0x66, 0x67, 0x68, 0x69, 0x6A, 0x00
     };
     oled_write_P(caps0, false);
}

static void Fnkeys(void){
     static const char PROGMEM func0[] = {
	//0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x00
	0x6B, 0x6B, 0x2B, 0x4B, 0x6B,
	0x6B, 0x2C, 0x2D, 0x2E, 0x2F,
	0x6B, 0x4C, 0x4D, 0x4E, 0x4F,
	0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x00
     };
     oled_set_cursor(0,2);
     oled_write_P(func0, false);

}

static void Writin(void){
     static const char PROGMEM wrtn0[] = {
	0x10, 0x11, 0x12, 0x13, 0x14,
	0x30, 0x31, 0x32, 0x33, 0x34,
	0x50, 0x51, 0x52, 0x53, 0x54,
	0x70, 0x71, 0x72, 0x73, 0x74, 0x00
     };
     oled_set_cursor(0,2);
     oled_write_P(wrtn0, false);
}

static void Symbols(void){
     static const char PROGMEM sym0[] = {
	0x15, 0x16, 0x17, 0x18, 0x19,
	0x35, 0x36, 0x37, 0x38, 0x39,
	0x55, 0x56, 0x57, 0x58, 0x59,
	0x75, 0x76, 0x77, 0x78, 0x79, 0x00
     };
     oled_set_cursor(0,2);
     oled_write_P(sym0, false);
}

static void Gamin(void){
     static const char PROGMEM gmn0[] = {
	0x1A, 0x1B, 0x1C, 0x1D, 0x1E,
	0x3A, 0x3B, 0x3C, 0x3D, 0x3E,
	0x5A, 0x5B, 0x5C, 0x5D, 0x5E,
	0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x00
     };
     oled_set_cursor(0,2);
     oled_write_P(gmn0, false);
}

static void Tex(void){
     static const char PROGMEM tex0[] = {
	0x93, 0x94, 0x95, 0x96, 0x97,
	0xB3, 0xB4, 0xB5, 0xB6, 0xB7,
	0xD3, 0xD4, 0xD5, 0xD6, 0xD7,
	0x6B, 0x6B, 0x6B, 0x6E, 0x6F, 0x00
     };
     oled_set_cursor(0,2);
     oled_write_P(tex0, false);
}

static void Config(void){
     static const char PROGMEM cfg0[] = {
	0x99, 0x9A, 0x9B, 0x9C, 0x9D,
	0xB9, 0xBA, 0xBB, 0xBC, 0xBD,
	0xD9, 0xDA, 0xDB, 0xDC, 0xDD,
	0x6B, 0x6B, 0x6B, 0x6E, 0x6F, 0x00
     };
     oled_set_cursor(0,2);
     oled_write_P(cfg0, false);
}


void Write_lyr(void){
	static uint8_t lyr_ac;
	for (uint8_t i = 0; i <= Conf; i++){
		if (IS_LAYER_ON(i)) lyr_ac = i;
	}
	if (host_keyboard_led_state().caps_lock || is_caps_word_on()){
		oled_set_cursor(0,9);
		Caps();
		switch (lyr_ac){
			case Wrtng:
				Writin();
				break;
			case Sym:
				Symbols();
				break;
			case Fn:
				Fnkeys();
				break;
			case Gaming:
				Gamin();
				break;
			case Latex:
				Tex();
				break;
			case Conf:
				Config();
				break;
		}
	} else {
		oled_set_cursor(0,9);
		Arch();
		switch (lyr_ac){
			case Wrtng:
				Writin();
				break;
			case Sym:
				Symbols();
				break;
			case Fn:
				Fnkeys();
				break;
			case Gaming:
				Gamin();
				break;
			case Latex:
				Tex();
				break;
			case Conf:
				Config();
				break;
		}
	}
}

